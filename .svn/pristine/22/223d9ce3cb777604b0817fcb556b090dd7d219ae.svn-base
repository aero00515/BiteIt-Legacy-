package edu.utboy.biteit;

import idv.andylin.tw.andyandroidlibs.HandlerCallBack;
import idv.andylin.tw.andyandroidlibs.utils.MyLog;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.Projection;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

import edu.utboy.biteit.asynctasks.PhotoCommentRequest;
import edu.utboy.biteit.asynctasks.StoreInfoRequest;
import edu.utboy.biteit.asynctasks.VolleyTaskManager;
import edu.utboy.biteit.models.Friend;
import edu.utboy.biteit.models.MarkerItem;
import edu.utboy.biteit.models.PhotoComment;
import edu.utboy.biteit.models.StoreFriends;
import edu.utboy.biteit.models.StoreInfo;
import edu.utboy.biteit.models.StorePhotoComments;
import edu.utboy.biteit.models.dao.FriendDAO;
import edu.utboy.biteit.models.dao.PhotoCommentDAO;
import edu.utboy.biteit.models.dao.StoreInfoDAO;
import edu.utboy.biteit.ui.FriendsInfoActivity;
import edu.utboy.biteit.ui.StoreInfoActivity;
import edu.utboy.biteit.ui.adapters.FragmentViewPagerAdapter;
import edu.utboy.biteit.ui.pages.SlideshowFragment;
import edu.utboy.biteit.ui.pages.SlideshowFragment.OnSlideshowImgClicked;
import edu.utboy.biteit.utils.MapInfo;

public class MainActivity extends ActionBarActivity implements
		NavigationDrawerFragment.NavigationDrawerCallbacks,
		ViewPager.OnPageChangeListener {

	public static Map<String, StorePhotoComments> testStoreInfos;
	private static final int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
	private static final int REQUEST_STORE_INFO_FINISH = 1;
	private static final int REQUEST_STORE_INFO_FAIL = 2;
	private static final int INIT_GOOGLE_MAP_FINISH = 4;
	private static final int REQUEST_PHOTO_COMMENT_FINISH = 5;
	private static final String STORE_MODE_TAG = "store_mode_tag";
	private static final String FRIEND_MODE_TAG = "friend_mode_tag";

	private GoogleMap gMap;
	private CameraPosition cameraPosition;
	private FragmentViewPagerAdapter slideshowPicAdapter;
	private ViewPager pager;
	private List<Fragment> slideshowPicFragments;
	private MarkerOptions marker;
	private boolean isLocationChange = false;
	private boolean isFirstStoreInfoQuery = true;
	private boolean isCurPhotoCommentQuery = true;
	private boolean isCameraChange = false;
	private String curViewRadius;
	private List<MarkerItem> markerItems;
	private List<StoreInfo> storeInfos;
	private List<PhotoComment> photoComments;
	private List<StorePhotoComments> storePhotoComments;
	private List<StoreFriends> storeFriends;
	private String adminArea;
	private String locality;
	private String latLngString;
	private String curMode;

	/**
	 * Fragment managing the behaviors, interactions and presentation of the
	 * navigation drawer.
	 */
	private NavigationDrawerFragment mNavigationDrawerFragment;

	/**
	 * Used to store the last screen title. For use in
	 * {@link #restoreActionBar()}.
	 */
	private CharSequence mTitle;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		slideshowPicFragments = new ArrayList<Fragment>();
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				this).build();
		ImageLoader.getInstance().init(config);
		slideshowPicAdapter = new FragmentViewPagerAdapter(
				getSupportFragmentManager(), slideshowPicFragments);

		mNavigationDrawerFragment = (NavigationDrawerFragment) getSupportFragmentManager()
				.findFragmentById(R.id.navigation_drawer);
		pager = (ViewPager) findViewById(R.id.pager);
		mNavigationDrawerFragment.setUp(R.id.navigation_drawer,
				(DrawerLayout) findViewById(R.id.drawer_layout));
		mTitle = getTitle();

		// Set up the drawer.

		pager.setAdapter(slideshowPicAdapter);
		pager.setPageMargin(5);
		pager.setOnPageChangeListener(this);

		// If hardware acceleration is enabled, you should also remove
		// clipping on the pager for its children.
		pager.setClipChildren(false);

		// Check google play service available
		int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
		if (status != ConnectionResult.SUCCESS) {
			GooglePlayServicesUtil.getErrorDialog(status, this,
					CONNECTION_FAILURE_RESOLUTION_REQUEST).show();
		} else {
			initGoogleMap();
		}
	}

	private void initGoogleMap() {
		if (gMap == null) {
			gMap = ((MapFragment) getFragmentManager().findFragmentById(
					R.id.map)).getMap();
		}

		marker = new MarkerOptions();

		gMap.getUiSettings().setMyLocationButtonEnabled(true);
		gMap.setMyLocationEnabled(true);

		gMap.setOnCameraChangeListener(cameraChangeListener);

		gMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {

			@Override
			public void onMyLocationChange(Location loc) {
				if (!isLocationChange) {
					isLocationChange = true;
					cameraPosition = new CameraPosition.Builder()
							.target(new LatLng(loc.getLatitude(), loc
									.getLongitude())).zoom(16).build();

					marker.position(cameraPosition.target)
							.icon(BitmapDescriptorFactory
									.fromResource(R.drawable.yellow_point))
							.alpha(0.8f);

					gMap.addMarker(marker);

					gMap.animateCamera(CameraUpdateFactory
							.newCameraPosition(cameraPosition));
				}
			}
		});
		sendMsg(INIT_GOOGLE_MAP_FINISH);
	}

	private OnCameraChangeListener cameraChangeListener = new OnCameraChangeListener() {
		@Override
		public void onCameraChange(CameraPosition position) {
			double lat = position.target.latitude;
			double lng = position.target.longitude;
			MyLog.w(MainActivity.class, "position: " + lat + lng);

			if ((lat != 0 || lng != 0.0) && !isCameraChange) {

				isCameraChange = true;

				StringBuilder latLng = new StringBuilder();
				latLng.append(String.valueOf(lng)).append(",")
						.append(String.valueOf(lat));
				latLngString = latLng.toString();

				String[] adminCompenents = MapInfo.getAdminArea(lat, lng,
						MainActivity.this);

				adminArea = adminCompenents[0];
				locality = adminCompenents[1];

				if (adminArea == null) {
					adminArea = "";
				}
				if (locality == null) {
					locality = "";
				}

				LatLng cameraNearLeft = gMap.getProjection().getVisibleRegion().nearLeft;
				curViewRadius = MapInfo.getRadius(lat, lng,
						cameraNearLeft.latitude, cameraNearLeft.longitude);

				MyLog.d(MainActivity.class, "Data:\n" + "Admin area: "
						+ adminArea + locality + "\n" + "LatLng: " + latLng
						+ "\n" + "Radius: " + curViewRadius);

				// requestStoreInfo(adminArea, locality, latLngString,
				// curViewRadius);

				markerItems = new ArrayList<MarkerItem>();
			}
		}
	};

	private void requestStoreInfo(String fisrtLevel, String thirdLevel,
			String lnglat, String radius) {
		VolleyTaskManager.getInstance().init(getAssets());
		try {
			Bundle storePrams = new Bundle();

			if (isFirstStoreInfoQuery) {
				isFirstStoreInfoQuery = false;
				storeInfos = new ArrayList<StoreInfo>();
				storePrams = StoreInfoRequest.getInstance()
						.getNearbyStoreParams(fisrtLevel, thirdLevel, lnglat,
								radius);
			} else {
				storePrams = StoreInfoRequest.getInstance().getNextPrevParams(
						StoreInfoRequest.getInstance().getStoreInfoNextPage());
			}

			StoreInfoRequest.getInstance().storeInfoRequest(this, storePrams,
					new Response.Listener<JSONObject>() {
						@Override
						public void onResponse(JSONObject response) {
							if (response != null) {

								List<StoreInfo> infos = StoreInfoRequest
										.getInstance().getStoreInfoByResponse(
												response);
								storeInfos.addAll(infos);
								addMarker(infos);
								if (StoreInfoRequest.getInstance()
										.getStoreInfoNextPage() != null) {
									requestStoreInfo(adminArea, locality,
											latLngString, curViewRadius);
								} else {
									sendMsg(REQUEST_STORE_INFO_FINISH);
								}
							}
						}
					}, new Response.ErrorListener() {
						@Override
						public void onErrorResponse(VolleyError error) {
							MyLog.e(MainActivity.class, error.getMessage());
							sendMsg(REQUEST_STORE_INFO_FAIL);
						}
					});
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	private void requestPhotoComment(final StoreInfo info) {
		Bundle params = new Bundle();
		VolleyTaskManager.getInstance().init(getAssets());
		if (isCurPhotoCommentQuery) {
			isCurPhotoCommentQuery = false;
			photoComments = new ArrayList<PhotoComment>();
			storePhotoComments = new ArrayList<StorePhotoComments>();
			params = PhotoCommentRequest.getInstance()
					.createPhotoCommentBundleParamsByStoreId(info.getStoreId());
		} else {
			params = PhotoCommentRequest.getInstance()
					.getNextPrevParams(
							PhotoCommentRequest.getInstance()
									.getPhotoCommentNextPage());
		}

		PhotoCommentRequest.getInstance().getPhotoComments(this, params,
				new Response.Listener<JSONObject>() {

					@Override
					public void onResponse(JSONObject response) {
						MyLog.d(MainActivity.class, "photo comment: "
								+ response.toString());

						photoComments.add(PhotoCommentRequest.getInstance()
								.getPhotoCommentRequest(response));
						if (PhotoCommentRequest.getInstance()
								.getPhotoCommentNextPage() != null) {
							requestPhotoComment(info);
						} else {
							storePhotoComments.add(new StorePhotoComments(info,
									photoComments));
						}
					}
				}, new Response.ErrorListener() {
					@Override
					public void onErrorResponse(VolleyError error) {
						MyLog.e(MainActivity.class, error.getMessage());
					}
				});
	}

	private void addMarker(List<StoreInfo> infos) {
		List<MarkerItem> ms = new ArrayList<MarkerItem>();
		for (StoreInfo info : infos) {
			ms.add(new MarkerItem(info.getLatitude(), info.getLongitude()));
		}

		markerItems.addAll(ms);

		for (MarkerItem m : ms) {
			LatLng pos = m.getLatlng();
			marker.position(pos)
					.icon(BitmapDescriptorFactory
							.fromResource(R.drawable.yellow_point)).alpha(0.8f);
			gMap.addMarker(marker);
		}
	}

	private LatLngBounds creatMarkerBounds() {
		LatLngBounds.Builder builder = new LatLngBounds.Builder();
		for (MarkerItem m : markerItems) {
			builder = builder.include(m.getLatlng());
		}
		LatLngBounds bounds = builder.build();

		return bounds;
	}

	private List<StorePhotoComments> getInBoundsStorePhotoComments() {
		setInBoundMarkers();

		List<StorePhotoComments> inBoundStorePhotoComments = new ArrayList<StorePhotoComments>();
		for (int i = 0; i < storePhotoComments.size(); i++) {
			if (markerItems.get(i).isInBounds()) {
				inBoundStorePhotoComments.add(storePhotoComments.get(i));
			}
		}
		return inBoundStorePhotoComments;
	}

	private List<StoreFriends> getInBoundsStoreFriends() {
		setInBoundMarkers();

		List<StoreFriends> inBoundStoreFriends = new ArrayList<StoreFriends>();
		for (int i = 0; i < storeFriends.size(); i++) {
			if (markerItems.get(i).isInBounds()) {
				inBoundStoreFriends.add(storeFriends.get(i));
			}
		}
		return inBoundStoreFriends;
	}

	private void setInBoundMarkers() {
		Projection projection = gMap.getProjection();
		LatLngBounds bounds = projection.getVisibleRegion().latLngBounds;

		for (MarkerItem marker : markerItems) {
			if (bounds.contains(marker.getLatlng())) {
				marker.setInBounds(true);
			} else {
				marker.setInBounds(false);
			}
		}
	}

	private List<StoreFriends> getStoreFriend(List<Friend> friends) {
		List<StoreFriends> storeFrinedsList = new ArrayList<StoreFriends>();

		for (int i = 0; i < storePhotoComments.size(); i++) {
			List<Friend> fs = new ArrayList<Friend>();
			for (PhotoComment photoComment : storePhotoComments.get(i)
					.getPhotocomments()) {
				if (friends.contains(photoComment.getUserId())) {
					for (Friend f : friends) {
						if (f.getId() == photoComment.getUserId()) {
							fs.add(f);
						}
					}
				}
			}
			storeFrinedsList.add(new StoreFriends(storePhotoComments.get(i)
					.getStoreInfo(), fs));
		}
		return storeFrinedsList;
	}

	private void setSlideshowPic() {
		for (int i = 0; i < testStoreInfos.size(); i++) {

			PhotoComment photoComment = testStoreInfos.get("" + i)
					.getPhotocomments().get(0);

			Bundle data = new Bundle();
			data.putString(SlideshowFragment.SLIDESHOW_PIC_URI, photoComment
					.getUri().toString());
			data.putInt(SlideshowFragment.SlIDESHOW_PIC_NUMBER, i);
			Fragment fragment = new SlideshowFragment(onSlideshowImgClicked);
			fragment.setArguments(data);
			slideshowPicFragments.add(fragment);
		}
		slideshowPicAdapter.notifyDataSetChanged();
	}

	// TODO there is only one picture in every fragment
//	private void setSlideshowPic(String modeTag) {
//		slideshowPicFragments.clear();
//		if (modeTag == STORE_MODE_TAG) {
//			curMode = STORE_MODE_TAG;
//			for (int i = 0; i < storePhotoComments.size(); i++) {
//				PhotoComment photoComment = storePhotoComments.get(i)
//						.getPhotocomments().get(0);
//				Bundle data = new Bundle();
//				data.putString(SlideshowFragment.SLIDESHOW_PIC_URI,
//						photoComment.getUri().toString());
//				data.putInt(SlideshowFragment.SlIDESHOW_PIC_NUMBER, i);
//				Fragment fragment = new SlideshowFragment(onSlideshowImgClicked);
//				fragment.setArguments(data);
//				slideshowPicFragments.add(fragment);
//			}
//		} else if (modeTag == FRIEND_MODE_TAG) {
//			curMode = FRIEND_MODE_TAG;
//			for (int i = 0; i < storeFriends.size(); i++) {
//				Friend friend = storeFriends.get(i).getFriends().get(0);
//				Bundle data = new Bundle();
//				data.putString(SlideshowFragment.SLIDESHOW_PIC_URI,
//						friend.getPhoto());
//				data.putInt(SlideshowFragment.SlIDESHOW_PIC_NUMBER, i);
//				Fragment fragment = new SlideshowFragment(onSlideshowImgClicked);
//				fragment.setArguments(data);
//				slideshowPicFragments.add(fragment);
//			}
//		}
//		slideshowPicAdapter.notifyDataSetChanged();
//	}

	HandlerCallBack handler = new HandlerCallBack() {
		@Override
		public void handleDataMessage(Message msg) {
			switch (msg.what) {
			case REQUEST_STORE_INFO_FINISH:
				StoreInfoDAO storeInfoDao = new StoreInfoDAO(MainActivity.this);
				storeInfoDao.open();
				for (StoreInfo info : storeInfos) {
					storeInfoDao.save(info);
				}
				storeInfoDao.close();

				isCameraChange = false;
				isFirstStoreInfoQuery = true;
				for (StoreInfo info : storeInfos) {
					requestPhotoComment(info);
				}
				sendMsg(REQUEST_PHOTO_COMMENT_FINISH);
				break;
			case REQUEST_STORE_INFO_FAIL:
				isCameraChange = false;
				break;
			case INIT_GOOGLE_MAP_FINISH:
				initTestStoreInfo();
				setSlideshowPic();
				break;
			case REQUEST_PHOTO_COMMENT_FINISH:
				PhotoCommentDAO photoCommentDao = new PhotoCommentDAO(
						MainActivity.this);
				photoCommentDao.open();
				photoCommentDao.save(photoComments);
				photoCommentDao.close();

				isCurPhotoCommentQuery = true;
				storePhotoComments = getInBoundsStorePhotoComments();
				//setSlideshowPic(STORE_MODE_TAG);
				break;
			}
		}
	};

	private void sendMsg(int msgTag) {
		Message message = new Message();
		message.what = msgTag;
		handler.dataHandler.sendMessage(message);
	}

	private OnSlideshowImgClicked onSlideshowImgClicked = new OnSlideshowImgClicked() {
		@Override
		public void onImgClicked(int mNum) {
			MyLog.d(MainActivity.class, "image clicked callback");

//			Intent intent = new Intent();
//			if (curMode == STORE_MODE_TAG) {
//				intent.setClass(MainActivity.this, StoreInfoActivity.class);
//			} else if (curMode == FRIEND_MODE_TAG) {
//				intent.setClass(MainActivity.this, FriendsInfoActivity.class);
//			}
//			intent.putExtra(StoreInfoActivity.STORE_ID_TAG, storeInfos
//					.get(mNum).getStoreId());
//			startActivity(intent);
//			
//			 StoreInfo fakeSI = MainActivity.testStoreInfos.get(
//			 "" + mNum).getStoreInfo();
			
			 //test empty storeInfoActivity
			 Intent intent = new Intent();
			 intent.setClass(MainActivity.this, StoreInfoActivity.class);
			 MainActivity.this.startActivity(intent);
		}
	};

	@Override
	public void onNavigationDrawerItemSelected(String currentState) {
		// TODO make sth beautiful
	}

	public void onSectionAttached(int number) {
		switch (number) {
		case 1:
			mTitle = getString(R.string.title_section1);
			break;
		case 2:
			mTitle = getString(R.string.title_section2);
			break;
		case 3:
			mTitle = getString(R.string.title_section3);
			break;
		}
	}

	public void restoreActionBar() {
		ActionBar actionBar = getSupportActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
		actionBar.setDisplayShowTitleEnabled(true);
		actionBar.setTitle(mTitle);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		if (!mNavigationDrawerFragment.isDrawerOpen()) {
			// Only show items in the action bar relevant to this screen
			// if the drawer is not showing. Otherwise, let the drawer
			// decide what to show in the action bar.
			getMenuInflater().inflate(R.menu.main, menu);
			restoreActionBar();
			return true;
		}
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		switch (id) {
		case R.id.action_settings:
			break;
		case R.id.action_switch:
			Toast.makeText(this, "Switch Clicked!", Toast.LENGTH_LONG).show();
			if (curMode == STORE_MODE_TAG) {
				curMode = FRIEND_MODE_TAG;
				FriendDAO friendDao = new FriendDAO(this);
				friendDao.open();
				storeFriends = getStoreFriend(friendDao.get());
				MyLog.d(MainActivity.class, "friends: " + friendDao.get());
				storeFriends = getInBoundsStoreFriends();
				friendDao.close();
				//setSlideshowPic(FRIEND_MODE_TAG);
			} else if (curMode == FRIEND_MODE_TAG) {
				storePhotoComments = getInBoundsStorePhotoComments();
				//setSlideshowPic(STORE_MODE_TAG);
			}

			break;
		}
		return super.onOptionsItemSelected(item);
	}

	// TODO
	// 10 test food pictures
	private String[] foodPicUrls = {
			"http://0492918997.tw.tranews.com/images/Info/Y007889000001_2_1.JPG",
			"http://kaohsiung.tranews.com/Show/images/Store/Y008223000001_1_1.jpg",
			"http://0912815968.tranews.com/images/Info/Y011465000001_1_1.jpg",
			"http://ext.pimg.tw/kavanachang/1373459876-2427041519.jpg",
			"http://039870670.tw.tranews.com/Show/images/News/3243135_1.jpg",
			"http://0922653602.tw.tranews.com/images/Info/Y007175000001_1_1.jpg",
			"http://macrobioticchiangmai.com/wp-content/gallery/cooking-course-3/health-healthy-food.jpg",
			"http://034756132.tw.tranews.com/Show/images/News/3267923_1.jpg",
			"http://www.taipeisleep.com/images/eat7.jpg",
			"http://www.wall001.com/photograph/French_Food/mxxx01/[wall001.com]_French_Food_photo_EU196a.jpg" };

	// TODO
	/**
	 * make a test StorePhotoComments' HashMap which contains 10
	 * storePhotoComments
	 */
	public void initTestStoreInfo() {
		testStoreInfos = new HashMap<String, StorePhotoComments>();

		for (int i = 0; i < foodPicUrls.length; i++) {

			List<PhotoComment> photoComments = new ArrayList<PhotoComment>();
			photoComments.add(new PhotoComment(0L, 0,
					Uri.parse(foodPicUrls[i]), ""));
			photoComments.add(new PhotoComment(1L, 1,
					Uri.parse(foodPicUrls[i]), ""));
			photoComments.add(new PhotoComment(2L, 2,
					Uri.parse(foodPicUrls[i]), ""));
			storePhotoComment = new StorePhotoComments(new StoreInfo(0L, "e",
					"益祥人力出租", "台北市中正區愛國西路一號", "0223335555", 121.4444, 23.666,
					"123", "123", 4.0f, 4.5f, 3.0f, 5.0f, 3.5f, false, false,
					new String[] { "美食", "讚" }), photoComments);

			testStoreInfos.put("" + i, storePhotoComment);
		}
	}

	// TODO
	/**
	 * test photo comments
	 * */
	public static StorePhotoComments storePhotoComment;

	private void setImageFrame(int pos, int color) {
		View view = slideshowPicAdapter.getItem(pos).getView();
		LinearLayout imageFrame = (LinearLayout) view
				.findViewById(R.id.image_frame);
		imageFrame.setBackgroundColor(color);
	}

	@Override
	public void onPageScrollStateChanged(int arg0) {
	}

	@Override
	public void onPageScrolled(int arg0, float arg1, int arg2) {
	}

	@Override
	public void onPageSelected(int position) {
		MyLog.d(MainActivity.class, "Select position: " + position);

//		if (position == 0) {
//			setImageFrame(position, Color.RED);
//			setImageFrame(position + 1, Color.YELLOW);
//			setImageFrame(position + 2, Color.BLUE);
//		} else {
//			if (position == slideshowSize - 1) {
//				setImageFrame(position, Color.BLUE);
//				setImageFrame(position - 1, Color.YELLOW);
//				setImageFrame(position - 2, Color.RED);
//			} else {
//				setImageFrame(position - 1, Color.RED);
//				setImageFrame(position, Color.YELLOW);
//				setImageFrame(position + 1, Color.BLUE);
//				if (position > 1) {
//					setImageFrame(position - 2, Color.BLACK);
//				}
//				if (position < slideshowSize - 2) {
//					setImageFrame(position + 2, Color.BLACK);
//				}
//			}
//		}
	}

	/**
	 * END TEST
	 */

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class PlaceholderFragment extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		private static final String ARG_SECTION_NUMBER = "section_number";

		/**
		 * Returns a new instance of this fragment for the given section number.
		 */
		public static PlaceholderFragment newInstance(int sectionNumber) {
			PlaceholderFragment fragment = new PlaceholderFragment();
			Bundle args = new Bundle();
			args.putInt(ARG_SECTION_NUMBER, sectionNumber);
			fragment.setArguments(args);
			return fragment;
		}

		public PlaceholderFragment() {
		}

		@Override
		public void onAttach(Activity activity) {
			super.onAttach(activity);
			((MainActivity) activity).onSectionAttached(getArguments().getInt(
					ARG_SECTION_NUMBER));
		}

	}

}
