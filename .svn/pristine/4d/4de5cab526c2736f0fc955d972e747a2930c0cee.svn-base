package edu.utboy.biteit.models.dao;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import edu.utboy.biteit.db.DataBaseHelper;
import edu.utboy.biteit.models.StoreInfo;

public class StoreInfoDAO {

	private SQLiteDatabase database;
	private DataBaseHelper dbHelper;
	private String[] allColumns = { DataBaseHelper._ID,
			DataBaseHelper.STORE_ID, DataBaseHelper.GOOGLE_STORE_ID,
			DataBaseHelper.ADDRESS, DataBaseHelper.PHONE,
			DataBaseHelper.LONGTITUDE, DataBaseHelper.LATITUDE,
			DataBaseHelper.FIRST_LEVEL, DataBaseHelper.THIRD_LEVEL,
			DataBaseHelper.RATING_CLEAN, DataBaseHelper.RATING_SERVICE,
			DataBaseHelper.RATING_PRICE, DataBaseHelper.RATING_FAVOR,
			DataBaseHelper.RATING_UNKNOW, DataBaseHelper.IS_BLOCKED,
			DataBaseHelper.TAGS };

	public StoreInfoDAO(Context ctx) {
		dbHelper = DataBaseHelper.getDbHelper(ctx);
	}

	public void open() throws SQLException {
		database = dbHelper.getWritableDatabase();
	}

	public void close() {
		dbHelper.close();
	}

	/**
	 * @return the row ID of the newly inserted row, or -1 if an error occurred
	 */
	public long save(StoreInfo storeInfo) {
		String tags = "";
		for (String tag : storeInfo.getTags()) {
			tags += tag + ",";
		}
		tags.substring(0, tags.lastIndexOf(","));

		ContentValues values = new ContentValues();
		values.put(DataBaseHelper.STORE_ID, storeInfo.getStoreId());
		values.put(DataBaseHelper.GOOGLE_STORE_ID, storeInfo.getGoogleStoreId());
		values.put(DataBaseHelper.NAME, storeInfo.getName());
		values.put(DataBaseHelper.ADDRESS, storeInfo.getAddress());
		values.put(DataBaseHelper.PHONE, storeInfo.getPhone());
		values.put(DataBaseHelper.LONGTITUDE, storeInfo.getLongtitude());
		values.put(DataBaseHelper.LATITUDE, storeInfo.getLatitude());
		values.put(DataBaseHelper.RATING_CLEAN, storeInfo.getRatingClean());
		values.put(DataBaseHelper.RATING_SERVICE, storeInfo.getRatingService());
		values.put(DataBaseHelper.RATING_PRICE, storeInfo.getRatingPrice());
		values.put(DataBaseHelper.RATING_FAVOR, storeInfo.getRatingFavor());
		values.put(DataBaseHelper.RATING_UNKNOW, storeInfo.getRatingUnkonw());
		values.put(DataBaseHelper.IS_BLOCKED, storeInfo.isBlocked());
		values.put(DataBaseHelper.TAGS, tags);
		return database.insert(DataBaseHelper.TABLE_STORE_INFO, null, values);
	}

	public StoreInfo getStoreInfo(long storeId) {

		Cursor cursor = database.query(DataBaseHelper.TABLE_STORE_INFO,
				allColumns, DataBaseHelper.STORE_ID + "=?",
				new String[] { String.valueOf(storeId) }, null, null, null);

		cursor.moveToFirst();
		StoreInfo storeInfo = cursorToStoreInfo(cursor);

		// make sure to close the cursor
		cursor.close();
		return storeInfo;
	}

	public List<StoreInfo> getAllStoreInfos() {
		List<StoreInfo> storeInfos = new ArrayList<StoreInfo>();

		Cursor cursor = database.query(DataBaseHelper.TABLE_STORE_INFO,
				allColumns, null, null, null, null, null);

		cursor.moveToFirst();
		while (!cursor.isAfterLast()) {
			StoreInfo storeInfo = cursorToStoreInfo(cursor);
			storeInfos.add(storeInfo);
			cursor.moveToNext();
		}
		// make sure to close the cursor
		cursor.close();
		return storeInfos;
	}

	private StoreInfo cursorToStoreInfo(Cursor cursor) {
		long id = cursor.getLong(cursor.getColumnIndex(DataBaseHelper._ID));
		long storeId = cursor.getLong(cursor
				.getColumnIndex(DataBaseHelper.STORE_ID));
		String googleStoreId = cursor.getString(cursor
				.getColumnIndex(DataBaseHelper.GOOGLE_STORE_ID));
		String name = cursor.getString(cursor
				.getColumnIndex(DataBaseHelper.NAME));
		String address = cursor.getString(cursor
				.getColumnIndex(DataBaseHelper.ADDRESS));
		String phone = cursor.getString(cursor
				.getColumnIndex(DataBaseHelper.PHONE));
		double longtitude = cursor.getDouble(cursor
				.getColumnIndex(DataBaseHelper.LONGTITUDE));
		double latitude = cursor.getDouble(cursor
				.getColumnIndex(DataBaseHelper.LATITUDE));
		String firstLevel = cursor.getString(cursor
				.getColumnIndex(DataBaseHelper.FIRST_LEVEL));
		String thirdLevel = cursor.getString(cursor
				.getColumnIndex(DataBaseHelper.THIRD_LEVEL));
		float ratingClean = cursor.getFloat(cursor
				.getColumnIndex(DataBaseHelper.RATING_CLEAN));
		float ratingService = cursor.getFloat(cursor
				.getColumnIndex(DataBaseHelper.RATING_SERVICE));
		float ratingPrice = cursor.getFloat(cursor
				.getColumnIndex(DataBaseHelper.RATING_CLEAN));
		float ratingFavor = cursor.getFloat(cursor
				.getColumnIndex(DataBaseHelper.RATING_CLEAN));
		float ratingUnknow = cursor.getFloat(cursor
				.getColumnIndex(DataBaseHelper.RATING_CLEAN));
		boolean isBlocked = cursor.getInt(cursor
				.getColumnIndex(DataBaseHelper.IS_BLOCKED)) == 1 ? true : false;
		String[] tags = cursor.getString(
				cursor.getColumnIndex(DataBaseHelper.TAGS)).split(",");

		StoreInfo storeInfo = new StoreInfo(id, storeId, googleStoreId, name,
				address, phone, longtitude, latitude, firstLevel, thirdLevel,
				ratingClean, ratingService, ratingPrice, ratingFavor,
				ratingUnknow, isBlocked, tags);
		return storeInfo;
	}

}
