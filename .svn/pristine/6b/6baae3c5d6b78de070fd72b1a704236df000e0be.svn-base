package edu.utboy.biteit.asynctasks;

import idv.andylin.tw.andyandroidlibs.utils.MyLog;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.JsonObjectRequest;

import edu.utboy.biteit.asynctasks.requestqueues.SampleRequestQueue;
import edu.utboy.biteit.models.StoreInfo;
import edu.utboy.biteit.utils.AuthToken;

public class StoreInfoRequest {

	/**
	 * static Singleton instance
	 */
	private static StoreInfoRequest mVerifyUserRequest;
	private VolleyTaskManager mVolleyTaskManager;
	private String url;

	/**
	 * Private constructor for singleton
	 */
	private StoreInfoRequest() {
		mVolleyTaskManager = VolleyTaskManager.getInstance();
	}

	/**
	 * Static getter method for retrieving the singleton instance
	 */
	public static StoreInfoRequest getInstance() {
		if (mVerifyUserRequest == null) {
			synchronized (StoreInfoRequest.class) {
				if (mVerifyUserRequest == null) {
					mVerifyUserRequest = new StoreInfoRequest();
				}
			}
		}
		return mVerifyUserRequest;
	}

	public synchronized void storeInfoRequest(Context context,
			JSONObject requestBody,
			Response.Listener<JSONObject> responseListener,
			Response.ErrorListener errorListener) {
		if (isInit()) {
			url = mVolleyTaskManager.getServerUrl()
					+ mVolleyTaskManager.getApiStoreInfo();
			JsonObjectRequest jsonRequest = new JsonObjectRequest(
					Request.Method.POST, url, requestBody, responseListener,
					errorListener) {
				@Override
				public Map<String, String> getHeaders() throws AuthFailureError {
					HashMap<String, String> maps = new HashMap<String, String>();
					String token = AuthToken.getAuthToken();
					if (!token.isEmpty()) {
						maps.put("Authorization", "Token " + token);
					} else {
						VolleyLog.e("string",
								"token null: plz check auth again!");
					}
					return maps;
				}
			};
			SampleRequestQueue.getSampleRequestQueue(context)
					.addToRequestQueue(jsonRequest);
		}
	}

	public JSONObject getNearbyStoreRequestBodyWithIds(
			List<StoreInfo> storeInfos) throws JSONException {
		JSONObject json = new JSONObject();
		JSONArray jsonStoreArray = new JSONArray();
		for (StoreInfo storeInfo : storeInfos) {
			JSONObject jsonStore = new JSONObject();
			jsonStore.put("store_id", storeInfo.getStoreId());
			jsonStoreArray.put(jsonStore);
		}
		json.put("store_ids", jsonStoreArray);
		return json;
	}

	public JSONObject getNearbyStoreRequestBody(String firstLevel,
			String thirdLevel, String lnglat, String radius)
			throws JSONException {
		JSONObject json = new JSONObject();
		json.put("first_level", firstLevel);
		json.put("third_level", thirdLevel);
		json.put("lnglat", lnglat);
		json.put("radius", radius);
		return json;
	}

	public JSONObject getQueryAll() {
		return new JSONObject();
	}

	private boolean isInit() {
		if (mVolleyTaskManager.getServerUrl() == null) {
			MyLog.e(StoreInfoRequest.class,
					"VolleyTaskManager needs to be init before using request!");
			return false;
		}
		return true;
	}

}
