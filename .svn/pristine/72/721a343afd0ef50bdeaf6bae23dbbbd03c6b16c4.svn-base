package edu.utboy.biteit;

import idv.andylin.tw.andyandroidlibs.HandlerCallBack;
import idv.andylin.tw.andyandroidlibs.utils.MyLog;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.Projection;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.VisibleRegion;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

import edu.utboy.biteit.asynctasks.PhotoCommentRequest;
import edu.utboy.biteit.asynctasks.StoreInfoRequest;
import edu.utboy.biteit.asynctasks.VolleyTaskManager;
import edu.utboy.biteit.models.Friend;
import edu.utboy.biteit.models.MarkerItem;
import edu.utboy.biteit.models.PhotoComment;
import edu.utboy.biteit.models.StoreFriends;
import edu.utboy.biteit.models.StoreInfo;
import edu.utboy.biteit.models.StorePhotoComments;
import edu.utboy.biteit.models.dao.FriendDAO;
import edu.utboy.biteit.models.dao.PhotoCommentDAO;
import edu.utboy.biteit.models.dao.StoreInfoDAO;
import edu.utboy.biteit.ui.FriendsInfoActivity;
import edu.utboy.biteit.ui.StoreInfoActivity;
import edu.utboy.biteit.ui.adapters.FragmentViewPagerAdapter;
import edu.utboy.biteit.ui.pages.SlideshowFragment;
import edu.utboy.biteit.ui.pages.SlideshowFragment.OnSlideshowImgClicked;
import edu.utboy.biteit.utils.ConnectionDetector;
import edu.utboy.biteit.utils.MapInfo;

public class MainActivity extends ActionBarActivity implements
		NavigationDrawerFragment.NavigationDrawerCallbacks {

	public static Map<String, StorePhotoComments> testStoreInfos;
	private static final int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
	private static final int REQUEST_STORE_INFO_FINISH = 1;
	private static final int REQUEST_STORE_INFO_FAIL = 2;
	private static final int INIT_GOOGLE_MAP_FINISH = 4;
	private static final int REQUEST_PHOTO_COMMENT_FINISH = 5;
	private static final String STORE_MODE_TAG = "store_mode_tag";
	private static final String FRIEND_MODE_TAG = "friend_mode_tag";

	private GoogleMap gMap;
	private CameraPosition cameraPosition;
	private FragmentViewPagerAdapter slideshowPicAdapter;
	private ViewPager pager;
	private List<Fragment> slideshowPicFragments;
	private StoreInfoDAO storeInfoDao;
	private PhotoCommentDAO photoCommentDao;
	private FriendDAO friendDao;
	private List<MarkerItem> markerItems;
	private List<StoreInfo> storeInfos;
	private Map<String, StorePhotoComments> storePhotoComments;
	private List<StoreFriends> storeFriends;
	private boolean isLocationChange = false;
	private boolean isFirstStoreInfoQuery = true;
	private boolean isCurPhotoCommentQuery = true;
	private boolean isCameraChange = false;
	private boolean isInternetPresent = false;
	private String adminArea;
	private String locality;
	private String latLngString;
	private String curViewRadius;
	private String curMode;
	private int preClickedMarker;
	private boolean isFirstClickSlideshow = true;

	/**
	 * Fragment managing the behaviors, interactions and presentation of the
	 * navigation drawer.
	 */
	private NavigationDrawerFragment mNavigationDrawerFragment;

	/**
	 * Used to store the last screen title. For use in
	 * {@link #restoreActionBar()}.
	 */
	private CharSequence mTitle;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		slideshowPicFragments = new ArrayList<Fragment>();
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				this).build();
		ConnectionDetector cd = new ConnectionDetector(getApplicationContext());
		ImageLoader.getInstance().init(config);
		slideshowPicAdapter = new FragmentViewPagerAdapter(
				getSupportFragmentManager(), slideshowPicFragments);
		storeInfoDao = new StoreInfoDAO(MainActivity.this);
		photoCommentDao = new PhotoCommentDAO(MainActivity.this);
		friendDao = new FriendDAO(this);
		markerItems = new ArrayList<MarkerItem>();
		storeInfoDao.open();
		photoCommentDao.open();
		friendDao.open();

		mNavigationDrawerFragment = (NavigationDrawerFragment) getSupportFragmentManager()
				.findFragmentById(R.id.navigation_drawer);
		pager = (ViewPager) findViewById(R.id.pager);
		mNavigationDrawerFragment.setUp(R.id.navigation_drawer,
				(DrawerLayout) findViewById(R.id.drawer_layout));
		mTitle = getTitle();

		// Set up the drawer.

		pager.setAdapter(slideshowPicAdapter);
		pager.setPageMargin(5);

		// If hardware acceleration is enabled, you should also remove
		// clipping on the pager for its children.
		pager.setClipChildren(false);

		isInternetPresent = cd.isConnectingToInternet();

		// Check google play service available
		int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
		if (status != ConnectionResult.SUCCESS) {
			GooglePlayServicesUtil.getErrorDialog(status, this,
					CONNECTION_FAILURE_RESOLUTION_REQUEST).show();
		} else {
			initGoogleMap();
		}
	}

	private void initGoogleMap() {
		if (gMap == null) {
			gMap = ((MapFragment) getFragmentManager().findFragmentById(
					R.id.map)).getMap();
		}

		LocationManager locMgr = (LocationManager) getSystemService(LOCATION_SERVICE);
		Criteria criteria = new Criteria();
		String provider = locMgr.getBestProvider(criteria, true);
		Location loc = locMgr.getLastKnownLocation(provider);
		locMgr.requestLocationUpdates(provider, 20000, 50, locLitener);

		gMap.getUiSettings().setMyLocationButtonEnabled(true);
		gMap.setMyLocationEnabled(true);
		gMap.setOnMyLocationChangeListener(myLocationChangeListener);
		if (loc != null) {
			cameraPosition = new CameraPosition.Builder()
					.target(new LatLng(loc.getLatitude(), loc.getLongitude()))
					.zoom(16).build();
			gMap.animateCamera(CameraUpdateFactory
					.newCameraPosition(cameraPosition));
		}
	}

	private OnMyLocationChangeListener myLocationChangeListener = new OnMyLocationChangeListener() {
		@Override
		public void onMyLocationChange(Location loc) {
			if (!isLocationChange) {
				isLocationChange = true;
				gMap.setOnCameraChangeListener(cameraChangeListener);
				cameraPosition = new CameraPosition.Builder()
						.target(new LatLng(loc.getLatitude(), loc
								.getLongitude())).zoom(16).build();

				gMap.animateCamera(CameraUpdateFactory
						.newCameraPosition(cameraPosition));
			}
		}
	};

	private LocationListener locLitener = new LocationListener() {
		@Override
		public void onLocationChanged(Location location) {
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
		}

		@Override
		public void onProviderEnabled(String provider) {
		}

		@Override
		public void onProviderDisabled(String provider) {
		}
	};

	private OnCameraChangeListener cameraChangeListener = new OnCameraChangeListener() {
		@Override
		public void onCameraChange(CameraPosition position) {
			double lat = position.target.latitude;
			double lng = position.target.longitude;
			MyLog.w(MainActivity.class, "position: " + lat + lng);

			if (gMap.getCameraPosition().zoom < 15.0f) {
				gMap.animateCamera(CameraUpdateFactory.zoomTo(15.0f));
			} else {
				if ((lat != 0 || lng != 0) && !isCameraChange
						&& isInternetPresent) {
					isCameraChange = true;
					cleanOutBoundMarkers();

					StringBuilder latLng = new StringBuilder();
					latLng.append(String.valueOf(lng)).append(",")
							.append(String.valueOf(lat));
					latLngString = latLng.toString();

					String[] adminCompenents = MapInfo.getAdminArea(lat, lng,
							MainActivity.this);
					adminArea = adminCompenents[0];
					locality = adminCompenents[1];
					if (adminArea == null) {
						adminArea = "";
					}
					if (locality == null) {
						locality = "";
					}

					VisibleRegion vr = gMap.getProjection().getVisibleRegion();
					double left = vr.latLngBounds.southwest.longitude;
					double top = vr.latLngBounds.northeast.latitude;

					float leftRadius = MapInfo.getRadius(lat, lng, lat, left);
					float topRadius = MapInfo.getRadius(lat, lng, top, lng);
					curViewRadius = (leftRadius < topRadius) ? String
							.valueOf(leftRadius) : String.valueOf(topRadius);

					storeInfos = new ArrayList<StoreInfo>();
					storeInfos.clear();

					requestStoreInfo(adminArea, locality, latLngString,
							curViewRadius);
				}
			}
		}
	};

	private void requestStoreInfo(String fisrtLevel, String thirdLevel,
			String lnglat, String radius) {
		VolleyTaskManager.getInstance().init(getAssets());
		try {
			Bundle storePrams = new Bundle();

			if (isFirstStoreInfoQuery) {
				isFirstStoreInfoQuery = false;
				storePrams = StoreInfoRequest.getInstance()
						.getNearbyStoreParams(fisrtLevel, thirdLevel, lnglat,
								radius);
			} else {
				storePrams = StoreInfoRequest.getInstance().getNextPrevParams(
						StoreInfoRequest.getInstance().getStoreInfoNextPage());
			}

			StoreInfoRequest.getInstance().storeInfoRequest(this, storePrams,
					new Response.Listener<JSONObject>() {
						@Override
						public void onResponse(JSONObject response) {
							if (response != null) {

								List<StoreInfo> infos = StoreInfoRequest
										.getInstance().getStoreInfoByResponse(
												response);
								storeInfos.addAll(infos);
								addMarker(infos);
								if (StoreInfoRequest.getInstance()
										.getStoreInfoNextPage() != null) {
									requestStoreInfo(adminArea, locality,
											latLngString, curViewRadius);
								} else {
									sendMsg(REQUEST_STORE_INFO_FINISH);
								}
							}
						}
					}, new Response.ErrorListener() {
						@Override
						public void onErrorResponse(VolleyError error) {
							if (error != null) {
								MyLog.e(MainActivity.class, error.toString());
							}
							sendMsg(REQUEST_STORE_INFO_FAIL);
						}
					});
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	private void requestPhotoComment(final StoreInfo info) {
		Bundle params = new Bundle();
		VolleyTaskManager.getInstance().init(getAssets());
		if (isCurPhotoCommentQuery) {
			isCurPhotoCommentQuery = false;

			params = PhotoCommentRequest.getInstance()
					.createPhotoCommentBundleParamsByStoreId(info.getStoreId());
		} else {
			params = PhotoCommentRequest.getInstance()
					.getNextPrevParams(
							PhotoCommentRequest.getInstance()
									.getPhotoCommentNextPage());
		}

		PhotoCommentRequest.getInstance().getPhotoComments(this, params,
				new Response.Listener<JSONObject>() {

					@Override
					public void onResponse(JSONObject response) {
						MyLog.d(MainActivity.class, "photo comment: "
								+ response.toString());

						List<PhotoComment> photoComments = PhotoCommentRequest
								.getInstance().getPhotoCommentRequest(response);

						storePhotoComments
								.get(String.valueOf(info.getStoreId()))
								.getPhotocomments().addAll(photoComments);

						if (PhotoCommentRequest.getInstance()
								.getPhotoCommentNextPage() != null) {
							requestPhotoComment(info);
						} else {
							savePhotoCommentDbThread(storePhotoComments.get(
									String.valueOf(info.getStoreId()))
									.getPhotocomments());
							sendMsg(REQUEST_PHOTO_COMMENT_FINISH);
						}
					}
				}, new Response.ErrorListener() {
					@Override
					public void onErrorResponse(VolleyError error) {
						if (error != null) {
							MyLog.e(MainActivity.class, error.getMessage());
						}
					}
				});
	}

	private void addMarker(List<StoreInfo> infos) {
		List<MarkerItem> ms = new ArrayList<MarkerItem>();
		for (StoreInfo info : infos) {
			ms.add(new MarkerItem(info.getLatitude(), info.getLongitude()));
		}

		markerItems.addAll(ms);

		for (MarkerItem m : ms) {
			Marker marker = gMap
					.addMarker(new MarkerOptions()
							.position(m.getLatlng())
							.icon(BitmapDescriptorFactory
									.fromResource(R.drawable.yellow_point))
							.alpha(0.8f));
			m.setMarker(marker);
		}
	}

	private LatLngBounds creatMarkerBounds() {
		LatLngBounds.Builder builder = new LatLngBounds.Builder();
		for (MarkerItem m : markerItems) {
			builder = builder.include(m.getLatlng());
		}
		LatLngBounds bounds = builder.build();
		return bounds;
	}

	private List<StorePhotoComments> getInBoundsStorePhotoComments() {
		setInBoundMarkers();

		List<StorePhotoComments> inBoundStorePhotoComments = new ArrayList<StorePhotoComments>();
		for (int i = 0; i < storePhotoComments.size(); i++) {
			if (markerItems.get(i).isInBounds()) {
				inBoundStorePhotoComments.add(storePhotoComments.get(i));
			}
		}
		MyLog.d(MainActivity.class, "In bound photoComment size : "
				+ inBoundStorePhotoComments.size());
		return inBoundStorePhotoComments;
	}

	private List<StoreFriends> getInBoundsStoreFriends() {
		setInBoundMarkers();

		List<StoreFriends> inBoundStoreFriends = new ArrayList<StoreFriends>();
		for (int i = 0; i < storeFriends.size(); i++) {
			if (markerItems.get(i).isInBounds()) {
				inBoundStoreFriends.add(storeFriends.get(i));
			}
		}
		return inBoundStoreFriends;
	}

	private void setInBoundMarkers() {
		Projection projection = gMap.getProjection();
		LatLngBounds bounds = projection.getVisibleRegion().latLngBounds;

		for (MarkerItem marker : markerItems) {
			if (bounds.contains(marker.getLatlng())) {
				marker.setInBounds(true);
			} else {
				marker.setInBounds(false);
			}
		}
	}

	private void cleanOutBoundMarkers() {
		Projection projection = gMap.getProjection();
		LatLngBounds bounds = projection.getVisibleRegion().latLngBounds;
		for (MarkerItem m : markerItems) {
			if (!bounds.contains(m.getLatlng())) {
				m.getMarker().remove();
			}
		}
	}

	private List<StoreFriends> getStoreFriend(List<Friend> friends) {
		List<StoreFriends> storeFrinedsList = new ArrayList<StoreFriends>();

		for (int i = 0; i < storePhotoComments.size(); i++) {
			List<Friend> fs = new ArrayList<Friend>();
			for (PhotoComment photoComment : storePhotoComments.get(i)
					.getPhotocomments()) {
				if (friends.contains(photoComment.getUserId())) {
					for (Friend f : friends) {
						if (f.getId() == photoComment.getUserId()) {
							fs.add(f);
						}
					}
				}
			}
			storeFrinedsList.add(new StoreFriends(storePhotoComments.get(i)
					.getStoreInfo(), fs));
		}
		return storeFrinedsList;
	}

	// TODO there is only one picture in every fragment
	private void setSlideshowPic(String modeTag) {
		curMode = (modeTag == STORE_MODE_TAG) ? STORE_MODE_TAG
				: FRIEND_MODE_TAG;
		slideshowPicFragments.clear();
		slideshowPicAdapter.notifyDataSetChanged();
		if (modeTag == STORE_MODE_TAG) {
			int i = 0;
			for (String key : storePhotoComments.keySet()) {
				String uri = "";
				if (!storePhotoComments.get(key).getPhotocomments().isEmpty()) {
					uri = storePhotoComments.get(key).getPhotocomments().get(0)
							.getUri().toString();
				}

				Bundle data = new Bundle();
				data.putString(SlideshowFragment.SLIDESHOW_PIC_URI, uri);
				data.putInt(SlideshowFragment.SlIDESHOW_PIC_NUMBER, i);
				Fragment fragment = new SlideshowFragment(onSlideshowImgClicked);
				fragment.setArguments(data);
				slideshowPicFragments.add(fragment);
				i++;
			}

		} else if (modeTag == FRIEND_MODE_TAG) {
			for (int i = 0; i < storeFriends.size(); i++) {
				Friend friend = storeFriends.get(i).getFriends().get(0);
				Bundle data = new Bundle();
				data.putString(SlideshowFragment.SLIDESHOW_PIC_URI,
						friend.getPhoto());
				data.putInt(SlideshowFragment.SlIDESHOW_PIC_NUMBER, i);
				Fragment fragment = new SlideshowFragment(onSlideshowImgClicked);
				fragment.setArguments(data);
				slideshowPicFragments.add(fragment);
			}
		}
		slideshowPicAdapter.notifyDataSetChanged();
	}

	private synchronized void saveStoreInfoDb() {
		for (StoreInfo info : storeInfos) {
			storeInfoDao.save(info);
		}
	}

	private synchronized void savePhotoCommentDb(
			List<PhotoComment> photoComments) {
		photoCommentDao.save(photoComments);
	}

	private void savePhotoCommentDbThread(final List<PhotoComment> photoComments) {
		new Thread() {
			@Override
			public void run() {
				savePhotoCommentDb(photoComments);
			}
		}.start();
	}

	private void saveStoreInfoDbThread() {
		new Thread() {
			@Override
			public void run() {
				saveStoreInfoDb();
			}
		}.start();
	}

	HandlerCallBack handler = new HandlerCallBack() {
		@Override
		public void handleDataMessage(Message msg) {
			switch (msg.what) {
			case REQUEST_STORE_INFO_FINISH:
				saveStoreInfoDbThread();
				isFirstStoreInfoQuery = true;

				storePhotoComments = new HashMap<String, StorePhotoComments>();
				storePhotoComments.clear();
				for (StoreInfo info : storeInfos) {
					isCurPhotoCommentQuery = true;
					storePhotoComments.put(String.valueOf(info.getStoreId()),
							new StorePhotoComments(info,
									new ArrayList<PhotoComment>()));
					requestPhotoComment(info);
				}
				break;
			case REQUEST_STORE_INFO_FAIL:
				isCameraChange = false;
				break;
			case INIT_GOOGLE_MAP_FINISH:
				break;
			case REQUEST_PHOTO_COMMENT_FINISH:
				setSlideshowPic(STORE_MODE_TAG);
				isCameraChange = false;
				// storePhotoComments = getInBoundsStorePhotoComments();
				break;
			}
		}
	};

	private void sendMsg(int msgTag) {
		Message message = new Message();
		message.what = msgTag;
		handler.dataHandler.sendMessage(message);
	}

	private OnSlideshowImgClicked onSlideshowImgClicked = new OnSlideshowImgClicked() {
		@Override
		public void onImgClicked(int mNum) {
			if (storeInfos.size() == storePhotoComments.size()) {
				if ((preClickedMarker == mNum) && !isFirstClickSlideshow) {
					Intent intent = new Intent();
					if (curMode == STORE_MODE_TAG) {
						intent.setClass(MainActivity.this,
								StoreInfoActivity.class);
					} else if (curMode == FRIEND_MODE_TAG) {
						intent.setClass(MainActivity.this,
								FriendsInfoActivity.class);
					}
					intent.putExtra(StoreInfoActivity.STORE_ID_TAG, storeInfos
							.get(mNum).getStoreId());
					MainActivity.this.startActivity(intent);
				} else {
					isFirstClickSlideshow = false;
					markerItems
							.get(preClickedMarker)
							.getMarker()
							.setIcon(
									BitmapDescriptorFactory
											.fromResource(R.drawable.yellow_point));
					markerItems
							.get(mNum)
							.getMarker()
							.setIcon(
									BitmapDescriptorFactory
											.fromResource(R.drawable.red_point));
					preClickedMarker = mNum;
				}
			}
		}
	};

	@Override
	public void onNavigationDrawerItemSelected(String currentState) {
		// TODO make sth beautiful
	}

	public void onSectionAttached(int number) {
		switch (number) {
		case 1:
			mTitle = getString(R.string.title_section1);
			break;
		case 2:
			mTitle = getString(R.string.title_section2);
			break;
		case 3:
			mTitle = getString(R.string.title_section3);
			break;
		}
	}

	public void restoreActionBar() {
		ActionBar actionBar = getSupportActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
		actionBar.setDisplayShowTitleEnabled(true);
		actionBar.setTitle(mTitle);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		if (!mNavigationDrawerFragment.isDrawerOpen()) {
			// Only show items in the action bar relevant to this screen
			// if the drawer is not showing. Otherwise, let the drawer
			// decide what to show in the action bar.
			getMenuInflater().inflate(R.menu.main, menu);
			restoreActionBar();
			return true;
		}
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		switch (id) {
		case R.id.action_settings:
			break;
		case R.id.action_switch:
			Toast.makeText(this, "Switch Clicked!", Toast.LENGTH_LONG).show();
			if (curMode == STORE_MODE_TAG) {
				curMode = FRIEND_MODE_TAG;
				storeFriends = getStoreFriend(friendDao.get());
				// storeFriends = getInBoundsStoreFriends();
				setSlideshowPic(FRIEND_MODE_TAG);
			} else if (curMode == FRIEND_MODE_TAG) {
				curMode = STORE_MODE_TAG;
				// storePhotoComments = getInBoundsStorePhotoComments();
				setSlideshowPic(STORE_MODE_TAG);
			}

			break;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onDestroy() {
		storeInfoDao.close();
		photoCommentDao.close();
		friendDao.close();
		super.onDestroy();
	}

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class PlaceholderFragment extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		private static final String ARG_SECTION_NUMBER = "section_number";

		/**
		 * Returns a new instance of this fragment for the given section number.
		 */
		public static PlaceholderFragment newInstance(int sectionNumber) {
			PlaceholderFragment fragment = new PlaceholderFragment();
			Bundle args = new Bundle();
			args.putInt(ARG_SECTION_NUMBER, sectionNumber);
			fragment.setArguments(args);
			return fragment;
		}

		public PlaceholderFragment() {
		}

		@Override
		public void onAttach(Activity activity) {
			super.onAttach(activity);
			((MainActivity) activity).onSectionAttached(getArguments().getInt(
					ARG_SECTION_NUMBER));
		}

	}

}
