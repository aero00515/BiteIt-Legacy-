package edu.utboy.biteit.ui;

import idv.andylin.tw.andyandroidlibs.utils.MyLog;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.viewpagerindicator.LinePageIndicator;

import edu.utboy.biteit.R;
import edu.utboy.biteit.asynctasks.PhotoCommentRequest;
import edu.utboy.biteit.models.PhotoComment;
import edu.utboy.biteit.ui.pages.PhotoCommentFragment;

public class StoreInfoTakePictureActivity extends FragmentActivity {

	public final static String STORE_INFO_FEEDBACK_PHOTO_COMMENT = "store_info_feedback_photo_comment";

	private ImageView closeImageView;
	private ImageView applyImageView;

	private ViewPager feedbackPager;
	private FeedbackPagerAdapter mFeedbackPagerAdapter;
	private LinePageIndicator lpi;

	private PhotoCommentFragment photoCommentFragment;
	private long storeId;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		int currentOrientation = getResources().getConfiguration().orientation;
		if (currentOrientation == Configuration.ORIENTATION_LANDSCAPE) {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
		} else {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT);
		}
		setContentView(R.layout.activity_store_info_feedback);
		feedbackPager = (ViewPager) findViewById(R.id.activity_store_info_feedback_pager);
		lpi = (LinePageIndicator) findViewById(R.id.feedback_pager_indicator);
		closeImageView = (ImageView) findViewById(R.id.activity_store_info_feedback_close);
		applyImageView = (ImageView) findViewById(R.id.activity_store_info_feedback_apply);

		if (savedInstanceState != null) {
			storeId = savedInstanceState.getLong(
					StoreInfoActivity.STORE_ID_TAG, 0);
		} else {
			storeId = getIntent().getLongExtra(StoreInfoActivity.STORE_ID_TAG,
					0);
			if (storeId != 0) {
				savedInstanceState = new Bundle();
				savedInstanceState.putLong(StoreInfoActivity.STORE_ID_TAG,
						storeId);
			}
		}
		MyLog.d(StoreInfoTakePictureActivity.class, "storeId:" + storeId);
		photoCommentFragment = new PhotoCommentFragment();
		photoCommentFragment.setArguments(savedInstanceState);
		mFeedbackPagerAdapter = new FeedbackPagerAdapter(
				getSupportFragmentManager());

		feedbackPager.setAdapter(mFeedbackPagerAdapter);
		lpi.setViewPager(feedbackPager);
		closeImageView.setOnClickListener(cancelListener);
		applyImageView.setOnClickListener(applyListener);
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);
		storeId = savedInstanceState.getLong(StoreInfoActivity.STORE_ID_TAG);
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		outState.putLong(StoreInfoActivity.STORE_ID_TAG, storeId);
		super.onSaveInstanceState(outState);
	}

	private OnClickListener applyListener = new OnClickListener() {

		@Override
		public void onClick(View v) {

			Intent data = new Intent();

			List<PhotoComment> photoComments = photoCommentFragment
					.getPhotoComments();
			String[] photos = new String[photoComments.size()];
			for (int i = 0; i < photoComments.size(); i++) {
				PhotoComment photoComment = photoComments.get(i);
				try {
					photos[i] = photoComment.saveAsJson().toString();
					JSONObject request = PhotoCommentRequest.getInstance()
							.createPhotoCommentJson(photoComment.getStoreId(),
									photoComment.getUserId(),
									photoComment.getUri(),
									photoComment.getComment());
					PhotoCommentRequest.getInstance().addPhotoComments(
							getApplicationContext(), request,
							new Response.Listener<JSONObject>() {

								@Override
								public void onResponse(JSONObject response) {
									MyLog.d(StoreInfoTakePictureActivity.class,
											response.toString());
								}
							}, new Response.ErrorListener() {

								@Override
								public void onErrorResponse(VolleyError error) {
									if (error.networkResponse != null
											&& error.networkResponse.data != null) {
										String d = new String(
												error.networkResponse.data);
										int length = d.length();
										int tO = length / 3;
										int tT = (int) (length / 3 * 2);
										MyLog.d(StoreInfoTakePictureActivity.class,
												"" + d.substring(0, tO));
										MyLog.d(StoreInfoTakePictureActivity.class,
												"" + d.substring(tO, tT));
										MyLog.d(StoreInfoTakePictureActivity.class,
												"" + d.substring(tT, length));

									}
								}
							});
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

			data.putExtra(STORE_INFO_FEEDBACK_PHOTO_COMMENT, photos);

			setResult(RESULT_OK, data);
			finish();
			overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);
		}

	};

	private OnClickListener cancelListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			setResult(RESULT_CANCELED);
			finish();
			overridePendingTransition(R.anim.abc_fade_in, R.anim.abc_fade_out);
		}
	};

	private class FeedbackPagerAdapter extends FragmentPagerAdapter {

		List<Fragment> fragments;

		public FeedbackPagerAdapter(FragmentManager fm) {
			super(fm);
			fragments = new ArrayList<Fragment>();
			fragments.add(photoCommentFragment);
		}

		@Override
		public int getCount() {
			return fragments.size();
		}

		@Override
		public Fragment getItem(int position) {
			return fragments.get(position);
		}
	};
}
