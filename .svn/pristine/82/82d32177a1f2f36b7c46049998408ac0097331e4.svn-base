package edu.utboy.biteit.asynctasks.requests;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.json.JSONException;
import org.json.JSONObject;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.Response.ErrorListener;
import com.android.volley.VolleyLog;

import edu.utboy.biteit.utils.AuthToken;

public class MutlipartRequest extends Request<JSONObject> {

	private MultipartEntityBuilder entityBuilder = MultipartEntityBuilder
			.create();

	private Response.Listener<JSONObject> responseListener;
	private File file;
	private JSONObject json;

	public MutlipartRequest(String url, ErrorListener errorListener,
			Response.Listener<JSONObject> responseListener, File file,
			JSONObject json) {
		super(Request.Method.POST, url, errorListener);

		this.responseListener = responseListener;
		this.file = file;
		this.json = json;
		build();
	}

	private void build() {
		entityBuilder.addPart("file", new FileBody(file));
		entityBuilder.addPart("info", new StringBody(json.toString(),
				ContentType.APPLICATION_JSON));
	}

	@Override
	public Map<String, String> getHeaders() throws AuthFailureError {
		HashMap<String, String> maps = new HashMap<String, String>();
		String token = AuthToken.getAuthToken();
		if (!token.isEmpty()) {
			maps.put("Authorization", "Token " + token);
		} else {
			VolleyLog.e("string", "token null: plz check auth again!");
		}
		return maps;
	}

	@Override
	public String getBodyContentType() {
		return ContentType.MULTIPART_FORM_DATA.getMimeType();
	}

	@Override
	public byte[] getBody() throws AuthFailureError {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {
			entityBuilder.build().writeTo(baos);
		} catch (IOException e) {
			VolleyLog.e("IOException writing to ByteArrayOutputStream");
			e.printStackTrace();
		}
		return baos.toByteArray();
	}

	@Override
	protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
		JSONObject json = new JSONObject();
		try {
			json.put("is_uploaded", getErrorListener() != null ? true : false);
		} catch (JSONException e) {
			VolleyLog.e("JSONException");
			e.printStackTrace();
		}
		return Response.success(json, getCacheEntry());
	}

	@Override
	protected void deliverResponse(JSONObject response) {
		responseListener.onResponse(response);
	}

}
