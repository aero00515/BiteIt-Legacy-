package edu.utboy.biteit.models.dao;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import edu.utboy.biteit.db.DataBaseHelper;
import edu.utboy.biteit.models.FeedbackPoint;


public class FeedbackPointDAO {

	private SQLiteDatabase database;
	private DataBaseHelper dbHelper;
	private String[] allColumns = { DataBaseHelper.NEW_STORE,
			DataBaseHelper.FILL_EMPTY, DataBaseHelper.REPORT_ERROR,
			DataBaseHelper.RATING_FEEDBACK, DataBaseHelper.PHOTO_FEEDBACK,
			DataBaseHelper.COMMENT_FEEDBACK };

	public FeedbackPointDAO(Context ctx) {
		dbHelper = DataBaseHelper.getDbHelper(ctx);
	}

	public void open() throws SQLException {
		database = dbHelper.getWritableDatabase();
	}

	public void close() {
		dbHelper.close();
	}

	/**
	 * @return the row ID of the newly inserted row, or -1 if an error occurred
	 */
	public long save(FeedbackPoint feedbackPoint) {

		ContentValues values = new ContentValues();
		values.put(DataBaseHelper.NEW_STORE, feedbackPoint.getNewStore());
		values.put(DataBaseHelper.FILL_EMPTY, feedbackPoint.getFillEmpty());
		values.put(DataBaseHelper.REPORT_ERROR, feedbackPoint.getReportError());
		values.put(DataBaseHelper.RATING_FEEDBACK, feedbackPoint.getRatingFeedback());
		values.put(DataBaseHelper.PHOTO_FEEDBACK, feedbackPoint.getPhotoFeedback());
		values.put(DataBaseHelper.COMMENT_FEEDBACK, feedbackPoint.getCommentFeedback());
		return database.insert(DataBaseHelper.TABLE_FEEDBACK_POINT, null, values);
	}


	public List<FeedbackPoint> getAllFeedbackPoints() {
		List<FeedbackPoint> feedbackPoints = new ArrayList<FeedbackPoint>();

		Cursor cursor = database.query(DataBaseHelper.TABLE_FEEDBACK_POINT,
				allColumns, null, null, null, null, null);

		cursor.moveToFirst();
		while (!cursor.isAfterLast()) {
			FeedbackPoint feedbackPoint = cursorToFeedbackPoint(cursor);
			feedbackPoints.add(feedbackPoint);
			cursor.moveToNext();
		}
		// make sure to close the cursor
		cursor.close();
		return feedbackPoints;
	}

	private FeedbackPoint cursorToFeedbackPoint(Cursor cursor) { 
		int newStore = cursor.getInt(cursor.getColumnIndex(DataBaseHelper.NEW_STORE));
		int fillEmpty = cursor.getInt(cursor.getColumnIndex(DataBaseHelper.FILL_EMPTY));
		int reportError = cursor.getInt(cursor.getColumnIndex(DataBaseHelper.REPORT_ERROR));
		int ratingFeedback = cursor.getInt(cursor.getColumnIndex(DataBaseHelper.RATING_FEEDBACK));
		int photoFeedback = cursor.getInt(cursor.getColumnIndex(DataBaseHelper.PHOTO_FEEDBACK));
		int commentFeedback = cursor.getInt(cursor.getColumnIndex(DataBaseHelper.COMMENT_FEEDBACK));

		FeedbackPoint feedbackPoint = new FeedbackPoint(newStore, fillEmpty, reportError, ratingFeedback, 
				photoFeedback, commentFeedback);
		return feedbackPoint;
	}

}
