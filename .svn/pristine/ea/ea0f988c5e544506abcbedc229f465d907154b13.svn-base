package edu.utboy.biteit;

import idv.andylin.tw.andyandroidlibs.utils.MyLog;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

import edu.utboy.biteit.asynctasks.StoreInfoRequest;
import edu.utboy.biteit.asynctasks.VolleyTaskManager;
import edu.utboy.biteit.models.MarkerItem;
import edu.utboy.biteit.models.PhotoComment;
import edu.utboy.biteit.models.StoreFriends;
import edu.utboy.biteit.models.StoreInfo;
import edu.utboy.biteit.models.StorePhotoComments;
import edu.utboy.biteit.ui.adapters.FragmentViewPagerAdapter;
import edu.utboy.biteit.ui.pages.SlideshowFragment;

public class MainActivity extends ActionBarActivity implements
		NavigationDrawerFragment.NavigationDrawerCallbacks,
		ViewPager.OnPageChangeListener {

	public static Map<String, StorePhotoComments> testStoreInfos;
	public static Map<String, StoreFriends> storeFriends;
	private static final int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
	private static final int GET_PROFILE_FINISH = 1;

	private GoogleMap gMap;
	private CameraPosition cameraPosition;
	private PagerContainer mContainer;
	private FragmentViewPagerAdapter slideshowPicAdapter;
	private ViewPager pager;
	private List<Fragment> slideshowPicFragments;
	private MarkerOptions marker;
	private boolean isLocationChange = false;
	private static boolean isCameraChange = false;
	private int slideshowSize = 0;
	private String curViewRadius;
	private Set<MarkerItem> markerItems;

	/**
	 * Fragment managing the behaviors, interactions and presentation of the
	 * navigation drawer.
	 */
	private NavigationDrawerFragment mNavigationDrawerFragment;

	/**
	 * Used to store the last screen title. For use in
	 * {@link #restoreActionBar()}.
	 */
	private CharSequence mTitle;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		IntentFilter filter = new IntentFilter();
		filter.addAction(SyncUserDataService.SYNC_ACTION);
		registerReceiver(mReceiver, filter);

		Intent intent = new Intent();
		intent.setAction(SyncUserDataService.SYNC_DATA);
		intent.setClass(this, SyncUserDataService.class);
		startService(intent);

		slideshowPicFragments = new ArrayList<Fragment>();
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				this).build();
		ImageLoader.getInstance().init(config);
		slideshowPicAdapter = new FragmentViewPagerAdapter(
				getSupportFragmentManager(), slideshowPicFragments);

		mNavigationDrawerFragment = (NavigationDrawerFragment) getSupportFragmentManager()
				.findFragmentById(R.id.navigation_drawer);
		mContainer = (PagerContainer) findViewById(R.id.pager_container);
		pager = (ViewPager) findViewById(R.id.pager);
		mNavigationDrawerFragment.setUp(R.id.navigation_drawer,
				(DrawerLayout) findViewById(R.id.drawer_layout));

		mTitle = getTitle();

		// Set up the drawer.

		pager = mContainer.getViewPager();
		pager.setAdapter(slideshowPicAdapter);
		pager.setOffscreenPageLimit(5);
		pager.setPageMargin(15);
		pager.setOnPageChangeListener(this);
		// If hardware acceleration is enabled, you should also remove
		// clipping on the pager for its children.
		pager.setClipChildren(false);

		// Check google play service available
		int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
		if (status != ConnectionResult.SUCCESS) {
			GooglePlayServicesUtil.getErrorDialog(status, this,
					CONNECTION_FAILURE_RESOLUTION_REQUEST).show();
		} else {
			initTestStoreInfo();
			setSlideshowPic();
		}
	}

	private BroadcastReceiver mReceiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context context, Intent intent) {
			MyLog.w(MainActivity.class, intent.getAction());
			initGoogleMap();
		}
	};

	private void initGoogleMap() {
		if (gMap == null) {
			gMap = ((MapFragment) getFragmentManager().findFragmentById(
					R.id.map)).getMap();
		}

		marker = new MarkerOptions();

		gMap.getUiSettings().setMyLocationButtonEnabled(true);
		gMap.setMyLocationEnabled(true);

		gMap.setOnCameraChangeListener(cameraChangeListener);

		gMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {

			@Override
			public void onMyLocationChange(Location loc) {
				if (!isLocationChange) {
					isLocationChange = true;
					cameraPosition = new CameraPosition.Builder()
							.target(new LatLng(loc.getLatitude(), loc
									.getLongitude())).zoom(15).build();

					marker.position(cameraPosition.target)
							.icon(BitmapDescriptorFactory
									.fromResource(R.drawable.yellow_point))
							.alpha(0.6f);

					gMap.addMarker(marker);

					gMap.animateCamera(CameraUpdateFactory
							.newCameraPosition(cameraPosition));
				}
			}
		});
	}

	private OnCameraChangeListener cameraChangeListener = new OnCameraChangeListener() {
		@Override
		public void onCameraChange(CameraPosition position) {
			double lat = position.target.latitude;
			double lng = position.target.longitude;
			MyLog.w(MainActivity.class, "position: " + lat + lng);

			if ((lat != 0 || lat != 0.0) && !isCameraChange) {

				isCameraChange = true;

				StringBuilder latLng = new StringBuilder();
				latLng.append(String.valueOf(lng)).append(",")
						.append(String.valueOf(lat));

				String[] adminCompenents = getAdminArea(lat, lng);

				String adminArea = null;
				String locality = null;
				adminArea = adminCompenents[0];

				locality = adminCompenents[1];

				LatLng cameraNearLeft = gMap.getProjection().getVisibleRegion().nearLeft;
				curViewRadius = getRadius(lat, lng, cameraNearLeft.latitude,
						cameraNearLeft.longitude);

				MyLog.w(MainActivity.class, "Data:\n" + "Admin area: "
						+ adminArea + locality + "\n" + "LatLng: " + latLng
						+ "\n" + "Radius: " + curViewRadius);

				requestStoreInfo(adminArea, locality, latLng.toString(),
						curViewRadius);
			}
		}
	};

	private void requestStoreInfo(String fisrtLevel, String thirdLevel,
			String lnglat, String radius) {
		VolleyTaskManager.getInstance().init(getAssets());
		try {
			Bundle storeInfo = StoreInfoRequest.getInstance()
					.getNearbyStoreParams(fisrtLevel, thirdLevel, lnglat,
							radius);

			StoreInfoRequest.getInstance().storeInfoRequest(this, storeInfo,
					new Response.Listener<JSONObject>() {
						@Override
						public void onResponse(JSONObject response) {
							MyLog.d(MainActivity.class, response.toString());
							Message message = new Message();
							message.what = GET_PROFILE_FINISH;
							handler.sendMessage(message);
						}
					}, new Response.ErrorListener() {
						@Override
						public void onErrorResponse(VolleyError error) {
							MyLog.e(MainActivity.class, error.getMessage());
							Message message = new Message();
							message.what = GET_PROFILE_FINISH;
							handler.sendMessage(message);
						}
					});
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	private String[] getAdminArea(double lat, double lng) {
		String[] admins = new String[2];

		Geocoder mLocation = new Geocoder(this, Locale.getDefault());

		if (mLocation != null && Geocoder.isPresent()) {
			try {
				List<Address> components = mLocation.getFromLocation(lat, lng,
						1);

				if (components != null && components.size() > 0) {
					admins[0] = components.get(0).getAdminArea();
					admins[1] = components.get(0).getLocality();
				} else {
					MyLog.d(MainActivity.class,
							"Address is null or euqual to 0");
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return admins;
	}

	private String getRadius(double centerLat, double centerLng,
			double nearLeftLat, double nearLeftLng) {
		String radius;

		Location centerLoc = new Location("");
		centerLoc.setLatitude(centerLat);
		centerLoc.setLongitude(centerLng);

		Location nearleftLoc = new Location("");
		nearleftLoc.setLatitude(nearLeftLat);
		nearleftLoc.setLongitude(nearLeftLng);

		radius = String.valueOf(centerLoc.distanceTo(nearleftLoc));

		return radius;
	}

	private void updateMarker() {
		markerItems = new HashSet<MarkerItem>();

		long start = SystemClock.uptimeMillis();
		JSONObject jo = new JSONObject();
		Iterator<String> iter = jo.keys();
		String key = iter.next();
		while (iter.hasNext()) {
			try {
				Object value = jo.get(key);

				markerItems.add(new MarkerItem(0, 0, true));

			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		int count = 0;
		for (MarkerItem m : markerItems) {
			LatLng pos = new LatLng(m.getLat(), m.getLng());
			gMap.addMarker(new MarkerOptions().position(pos));
			count++;
		}
		long end = SystemClock.uptimeMillis();
		MyLog.w(MainActivity.class, "Add markers time: " + (end - start)
				+ "Count: " + count);
	}

	private void setSlideshowPic() {
		for (int i = 0; i < testStoreInfos.size(); i++) {

			PhotoComment photoComment = testStoreInfos.get("testInfo" + i)
					.getPhotocomments().get(0);

			Bundle data = new Bundle();
			data.putString(SlideshowFragment.SLIDESHOW_PIC_URI, photoComment
					.getUri().toString());
			data.putInt(SlideshowFragment.SlIDESHOW_PIC_NUMBER, i);
			Fragment fragment = new SlideshowFragment();
			fragment.setArguments(data);
			slideshowPicFragments.add(fragment);
		}
		slideshowPicAdapter.notifyDataSetChanged();
	}

	private static Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case 1:
				isCameraChange = false;
			}
		}
	};

	@Override
	public void onNavigationDrawerItemSelected(int position) {
		// update the main content by replacing fragments
		FragmentManager fragmentManager = getSupportFragmentManager();
		fragmentManager
				.beginTransaction()
				.replace(R.id.container,
						PlaceholderFragment.newInstance(position + 1)).commit();
	}

	public void onSectionAttached(int number) {
		switch (number) {
		case 1:
			mTitle = getString(R.string.title_section1);
			break;
		case 2:
			mTitle = getString(R.string.title_section2);
			break;
		case 3:
			mTitle = getString(R.string.title_section3);
			break;
		}
	}

	public void restoreActionBar() {
		ActionBar actionBar = getSupportActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
		actionBar.setDisplayShowTitleEnabled(true);
		actionBar.setTitle(mTitle);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		if (!mNavigationDrawerFragment.isDrawerOpen()) {
			// Only show items in the action bar relevant to this screen
			// if the drawer is not showing. Otherwise, let the drawer
			// decide what to show in the action bar.
			getMenuInflater().inflate(R.menu.main, menu);
			restoreActionBar();
			return true;
		}
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	// 10 test food pictures
	private String[] foodPicUrls = {
			"http://0492918997.tw.tranews.com/images/Info/Y007889000001_2_1.JPG",
			"http://kaohsiung.tranews.com/Show/images/Store/Y008223000001_1_1.jpg",
			"http://0912815968.tranews.com/images/Info/Y011465000001_1_1.jpg",
			"http://ext.pimg.tw/kavanachang/1373459876-2427041519.jpg",
			"http://039870670.tw.tranews.com/Show/images/News/3243135_1.jpg",
			"http://0922653602.tw.tranews.com/images/Info/Y007175000001_1_1.jpg",
			"http://macrobioticchiangmai.com/wp-content/gallery/cooking-course-3/health-healthy-food.jpg",
			"http://034756132.tw.tranews.com/Show/images/News/3267923_1.jpg",
			"http://www.taipeisleep.com/images/eat7.jpg",
			"http://www.wall001.com/photograph/French_Food/mxxx01/[wall001.com]_French_Food_photo_EU196a.jpg" };

	/**
	 * make a test StorePhotoComments' HashMap which contains 10
	 * storePhotoComments
	 */
	public void initTestStoreInfo() {
		testStoreInfos = new HashMap<String, StorePhotoComments>();

		for (int i = 0; i < foodPicUrls.length; i++) {

			List<PhotoComment> photoComments = new ArrayList<PhotoComment>();
			photoComments.add(new PhotoComment(0L, 0L, Uri
					.parse(foodPicUrls[i]), ""));
			photoComments.add(new PhotoComment(1L, 1L, Uri
					.parse(foodPicUrls[i]), ""));
			photoComments.add(new PhotoComment(2L, 2L, Uri
					.parse(foodPicUrls[i]), ""));
			storePhotoComment = new StorePhotoComments(new StoreInfo(0L, 0L,
					"e", "益祥人力出租", "台北市中正區愛國西路一號", "0223335555", 121.4444,
					23.666, "123", "123", 4.0f, 4.5f, 3.0f, 5.0f, 3.5f, false,
					new String[] { "美食", "讚" }), photoComments);

			testStoreInfos.put("testInfo" + i, storePhotoComment);
		}
		slideshowSize = testStoreInfos.size();
	}

	/**
	 * TEST
	 */
	public void initTest() {
		List<PhotoComment> photoComments = new ArrayList<PhotoComment>();
		PhotoComment photoComment0 = new PhotoComment(0L, 0L,
				Uri.parse(picUrls[0]), "");
		PhotoComment photoComment1 = new PhotoComment(1L, 0L,
				Uri.parse(picUrls[1]), "");
		PhotoComment photoComment2 = new PhotoComment(2L, 0L,
				Uri.parse(picUrls[2]), "");
		photoComments.add(photoComment0);
		photoComments.add(photoComment1);
		photoComments.add(photoComment2);
		fakeSI = new StoreInfo(0L, 0L, "e", "益祥人力出租", "台北市中正區愛國西路一號",
				"0223335555", 121.4444, 23.666, "123", "123", 4.0f, 4.5f, 3.0f,
				5.0f, 3.5f, false, new String[] { "美食", "讚" });
		storePhotoComment = new StorePhotoComments(fakeSI, photoComments);
	}

	private String[] picUrls = {
			"http://www.wrcmania.com/images/Immagini-forum/22/raychel-frew-sexy-hottie-chick-lingerie.jpg",
			"https://slm-assets1.secondlife.com/assets/2586756/lightbox/sexy_01-10.jpg?1291021756",
			"http://i1277.photobucket.com/albums/y496/ahmberquistgard/Gi16_zpse5c87582.jpg" };

	private static StoreInfo fakeSI;
	public static StorePhotoComments storePhotoComment;

	private void setImageFrame(int pos, int color) {
		View view = slideshowPicAdapter.getItem(pos).getView();
		LinearLayout imageFrame = (LinearLayout) view
				.findViewById(R.id.image_frame);
		imageFrame.setBackgroundColor(color);
	}

	@Override
	public void onPageScrollStateChanged(int arg0) {
	}

	@Override
	public void onPageScrolled(int arg0, float arg1, int arg2) {
	}

	@Override
	public void onPageSelected(int position) {
		MyLog.d(MainActivity.class, "Select position: " + position);

		if (position == 0) {
			setImageFrame(position, Color.RED);
			setImageFrame(position + 1, Color.YELLOW);
			setImageFrame(position + 2, Color.BLUE);
		} else {
			if (position == slideshowSize - 1) {
				setImageFrame(position, Color.BLUE);
				setImageFrame(position - 1, Color.YELLOW);
				setImageFrame(position - 2, Color.RED);
			} else {
				setImageFrame(position - 1, Color.RED);
				setImageFrame(position, Color.YELLOW);
				setImageFrame(position + 1, Color.BLUE);
				if (position > 1) {
					setImageFrame(position - 2, Color.BLACK);
				}
				if (position < slideshowSize - 2) {
					setImageFrame(position + 2, Color.BLACK);
				}
			}
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (mReceiver == null) {
			IntentFilter filter = new IntentFilter();
			filter.addAction(SyncUserDataService.SYNC_ACTION);
			registerReceiver(mReceiver, filter);
		}
	}

	@Override
	protected void onPause() {
		if (mReceiver != null) {
			unregisterReceiver(mReceiver);
			mReceiver = null;
		}
		super.onPause();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		if (mReceiver != null) {
			unregisterReceiver(mReceiver);
			mReceiver = null;
		}
	}

	/**
	 * END TEST
	 */

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class PlaceholderFragment extends Fragment {
		/**
		 * The fragment argument representing the section number for this
		 * fragment.
		 */
		private static final String ARG_SECTION_NUMBER = "section_number";

		/**
		 * Returns a new instance of this fragment for the given section number.
		 */
		public static PlaceholderFragment newInstance(int sectionNumber) {
			PlaceholderFragment fragment = new PlaceholderFragment();
			Bundle args = new Bundle();
			args.putInt(ARG_SECTION_NUMBER, sectionNumber);
			fragment.setArguments(args);
			return fragment;
		}

		public PlaceholderFragment() {
		}

		@Override
		public void onAttach(Activity activity) {
			super.onAttach(activity);
			((MainActivity) activity).onSectionAttached(getArguments().getInt(
					ARG_SECTION_NUMBER));
		}

	}

}
